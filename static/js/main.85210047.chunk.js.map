{"version":3,"sources":["assets/img/logo.png","assets/img/question.svg","components/Header.jsx","components/Button.jsx","components/Info.jsx","components/Question.jsx","pages/MemeGeneratorPage.jsx","App.js","redux/actions/memes.js","redux/reducers/memes.js","redux/reducers/rootReducers.js","redux/store.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","to","src","logo","alt","questionImg","Button","clickEvent","outline","children","onClick","classNames","Info","Question","MemeGeneratorPage","memes","useState","randomImg","setRandomImg","topText","setTopText","bottomText","setBottomText","onSubmit","event","preventDefault","randomNumber","Math","floor","random","length","randomItem","url","onChange","e","target","value","type","placeholder","download","href","App","useSelector","items","dispatch","useDispatch","useEffect","axios","get","then","response","payload","data","exact","path","render","initialState","loading","state","action","rootReducers","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","thunk","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.85210047.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.24f86ea5.png\";","module.exports = __webpack_public_path__ + \"static/media/question.700b5e46.svg\";","import React from 'react';\r\nimport logo from '../assets/img/logo.png';\r\nimport { Link } from 'react-router-dom';\r\nimport questionImg from '../assets/img//question.svg';\r\n\r\nfunction Header() {\r\n    return (\r\n        <header className='header'>\r\n            <div className='header__wrap'>\r\n                <nav className='header__nav'>\r\n                    <Link className='header__link' to='/'>\r\n                        <img className='header__logo' src={logo} alt=\"logo\" />\r\n                    </Link>\r\n                    <Link className='header__link' to='/info'>\r\n                        Info\r\n                    </Link>\r\n                </nav>\r\n                <Link to='/question' className='header__question'>\r\n                    <img src={questionImg} alt=\"img\" />\r\n                </Link>\r\n            </div>\r\n        </header >\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React, { Children } from 'react';\r\nimport classNames from 'classnames';\r\n\r\n\r\nconst Button = ({ clickEvent, className, outline, children }) => {\r\n    return (\r\n        <button onClick={clickEvent} className={classNames('button', className, {\r\n            'button-outline': outline,\r\n        })}>{children}</button>\r\n    )\r\n}\r\n\r\nexport default Button;","import React from 'react'\r\n\r\nfunction Info() {\r\n    return (\r\n        <div className='info'>\r\n            <h1>\r\n                Meme Generator\r\n            </h1>\r\n            <h2>\r\n                Version 1.0\r\n            </h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Info\r\n","import React from 'react'\r\n\r\nfunction Question() {\r\n    return (\r\n        <div className='question'>\r\n            <h1>\r\n                Как пользоваться приложением:\r\n            </h1>\r\n            <ul>\r\n                <li>\r\n                    Вы можете генерировать и изменять мемы\r\n                </li>\r\n                <li>\r\n                    Если вы хотите скачать оригинал картинки вы можете это сделать по ссылке \"скачать оригинал картинки\"\r\n                </li>\r\n                <li>\r\n                    Так же вы можете скачать измененную версию картинки используя скриншот\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Question\r\n","import React, { Fragment, useState } from 'react';\r\nimport { Button } from '../components';\r\n\r\n\r\n\r\nfunction MemeGeneratorPage({ memes }) {\r\n    const [randomImg, setRandomImg] = useState('http://i.imgflip.com/1bij.jpg')\r\n    const [topText, setTopText] = useState('Верхний текст')\r\n    const [bottomText, setBottomText] = useState('Нижний текст')\r\n\r\n\r\n    const handleTopChange = (e) => {\r\n        setTopText(e.target.value)\r\n    }\r\n    const handleBottomChange = (e) => {\r\n        setBottomText(e.target.value)\r\n    }\r\n    const onSubmit = (event) => {\r\n        event.preventDefault();\r\n        const randomNumber = Math.floor(Math.random() * memes.length);\r\n        const randomItem = memes[randomNumber].url;\r\n        setRandomImg(randomItem);\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className='wrap-generator'>\r\n                <form onSubmit={onSubmit} className='meme-form'>\r\n                    <input onChange={handleBottomChange} type=\"text\" placeholder=\"Top Text\" />\r\n                    <input onChange={handleTopChange} type=\"text\" placeholder=\"Bottom Text\" />\r\n                    <Button outline className='meme-btn'>Generate</Button>\r\n                </form>\r\n\r\n                <div download className='meme'>\r\n                    <img download src={randomImg} alt=\"meme\" />\r\n\r\n                    <h2 className='top'>{bottomText}</h2>\r\n                    <h2 className='bottom'> {topText} </h2>\r\n\r\n                </div>\r\n                <a className='meme__download' href={randomImg} download>Скачать оригинал картинки</a>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default MemeGeneratorPage\r\n","import React, { useEffect } from 'react';\nimport { Header, Info, Question } from './components';\nimport { MemeGeneratorPage } from './pages';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchMemes } from './redux/actions/memes';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport './App.scss';\n\nfunction App() {\n\n  const memes = useSelector(({ memes }) => memes.items);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchMemes());\n\n  }, [])\n\n  return (\n    <BrowserRouter>\n      <Header>Memes Generator</Header>\n      <div className='container'>\n        <Route exact path='/' render={() => <MemeGeneratorPage memes={memes} />} />\n        <Route path='/info' render={() => <Info />} />\n        <Route path='/question' render={() => <Question />} />\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import axios from 'axios';\r\n\r\nexport const addMemes = payload => ({\r\n    type: 'ADD_MEMES',\r\n    payload\r\n})\r\n\r\n\r\nexport const fetchMemes = () => (dispatch) => {\r\n    axios.get('https://api.imgflip.com/get_memes').then((response) => {\r\n\r\n        dispatch(addMemes(response.data.data.memes))\r\n    })\r\n}","const initialState = {\r\n    items: [],\r\n    loading: false,\r\n\r\n}\r\n\r\n\r\nconst memes = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'ADD_MEMES':\r\n            return {\r\n                ...state,\r\n                items: action.payload\r\n            }\r\n\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default memes;\r\n","import { combineReducers } from 'redux';\r\nimport memes from './memes'\r\n\r\n\r\nconst rootReducers = combineReducers({\r\n    memes,\r\n})\r\n\r\nexport default rootReducers;","import { createStore, compose, applyMiddleware } from 'redux';\r\nimport rootReducer from './reducers/rootReducers';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nexport default store;  ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}